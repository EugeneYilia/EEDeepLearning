data.space.attributes.dicrete={"user":"int","item":"int"}
data.space.attributes.continuous=["score"]

data.space.features={"user":"user","item":"item","score":"score"}

data.format=csv
data.convertors={"csv":{"key":"data/filmtrust/rating","value":{"user":0,"item":1,"score":2}}}

data.models={"model":["user","item","score"]}

data.splitter={"model":"model","type":"ratio","matchField":null,"sortField":null}

data.model.fields.user=user
data.model.fields.item=item
data.model.fields.score=score


data.model.context={}
data.model.score={"path":"data/filmtrust/rating","keyValues":[{"key":"user","value":"int"},{"key":"item","value":"int"},{"key":"score","value":"double"}]}

data.model.splitter=ratio
data.splitter.ratio.type=score

rec.init.mean=0.0
rec.init.std=0.1


# set data directory
dfs.data.dir=data
# set result directory
# recommender result will output in this folder
dfs.result.dir=result

# convertor
# load data and splitting data 
# into two (or three) set
# setting dataset name
data.input.path=filmtrust/rating
# setting dataset format(UIR, UIRT)
data.column.format=UIR
# setting method of split data
# value can be ratio, loocv, given, KCV

#data.splitter.cv.number=5
# using rating to split dataset
data.splitter.ratio=rating
# filmtrust dataset is saved by text
# text, arff is accepted

# the ratio of trainset
# this value should in (0,1)
data.splitter.trainset.ratio=0.8

# Detailed configuration of loocv, given, KCV 
# is written in User Guide 

# set the random seed for reproducing the results (split data, init parameters and other methods using random)
# default is set 1l
# if do not set ,just use System.currentTimeMillis() as the seed and could not reproduce the results.
rec.random.seed=1

# binarize threshold mainly used in ranking
# -1.0 - maxRate, binarize rate into -1.0 and 1.0
# binThold = -1.0ï¼Œ do nothing
# binThold = value, rating > value is changed to 1.0 other is 0.0, mainly used in ranking
# for PGM 0.0 maybe a better choose


# evaluation the result or not
rec.eval.enable=true

# specifies evaluators
# rec.eval.classes=auc,precision,recall...
# if rec.eval.class is blank 
# every evaluator will be calculated
# rec.eval.classes=auc,precision,recall

# evaluator value set is written in User Guide
# if this algorithm is ranking only true or false
rec.recommender.isranking=false

#can use user,item,social similarity, default value is user, maximum values:user,item,social
#rec.recommender.similarities=user